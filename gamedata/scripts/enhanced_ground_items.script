--
-- ITsPorkys - Enhanced Ground Items (EGI) v1.0.0
-- Last modified: 29.03.2025 (dd.mm.yyyy)
-- https://github.com/ITsPorky/ITsPorky_EnhancedGroundItems
--

-------------------------------------------------------------------------------------------------------
-- Variables
-------------------------------------------------------------------------------------------------------

local isToggled = false
--Object in players view (at crosshair / center screen)
local targetObject = nil

-------------------------------------------------------------------------------------------------------
-- Utility Functions
-------------------------------------------------------------------------------------------------------

-- Toggle code
function toggle_show_items()
  if(isToggled) then
    isToggled = false
    news_manager.send_tip(db.actor, "[EGI - Enhanced Ground Items] Toggle disabled...")
  else
    isToggled = true
    news_manager.send_tip(db.actor, "[EGI - Enhanced Ground Items] Toggle enabled...")
  end
end

-- HUD Start
HUD = nil

function hud_active()
	if (HUD == nil) then
		HUD = ui_enhanced_ground_items()
		get_hud():AddDialogToRender(HUD)
	end
end

function hud_remove()
	if (HUD) then
		get_hud():RemoveDialogToRender(HUD)
		HUD = nil
	end
end

function hud_update()
	if (HUD) then
		HUD:Update(true)
	end
end

-- HUD End

-- Utility functions
function object_by_id(id)
	return id and (db.storage[id] and db.storage[id].object or level.object_by_id(id))
end

function in_actor_inv(obj)
	local _parent = obj:parent()
	return _parent and (_parent:id() == db.actor:id())
end

function in_npc_inv(npc, obj)
	local _parent = obj:parent()
	return _parent and (_parent:id() == npc:id())
end

function vector_distance(pos1, pos2)
  local dx = pos1.x - pos2.x
  local dy = pos1.y - pos2.y
  local dz = pos1.z - pos2.z
  return math.sqrt(dx * dx + dy * dy + dz * dz)
end

-- Class Start
class "ui_enhanced_ground_items" (CUIScriptWnd) 

  -- Stores list of items to show with this feature (probably missed some)
  local item_classes = {
    -- Objects
    [clsid.artefact] = true,
    [clsid.obj_antirad] = true,
    [clsid.obj_attachable] = true,
    [clsid.obj_bandage] = true,
    -- [clsid.obj_bolt] = true,
    [clsid.obj_bottle] = true,
    [clsid.obj_document] = true,
    [clsid.obj_explosive] = true,
    [clsid.obj_food] = true,
    [clsid.obj_medkit] = true,
    [clsid.artefact_s] = true,
    [clsid.obj_explosive_s] = true,
    [clsid.obj_food_s] = true,
    [clsid.device_torch_s] = true,
    -- Devices
    [clsid.detector_advanced_s] = true,
    [clsid.detector_elite_s] = true,
    [clsid.detector_scientific_s] = true,
    [clsid.detector_simple_s] = true,
    [clsid.device_detector_advanced] = true,
    [clsid.device_custom] = true,
    [clsid.device_dosimeter] = true,
    [clsid.device_detector_elite] = true,
    [clsid.device_flashlight] = true,
    [clsid.device_flare] = true,
    [clsid.device_pda] = true,
    [clsid.device_detector_scientific] = true,
    [clsid.device_detector_simple] = true,
    [clsid.device_torch] = true,
    -- Equipment/Outfits
    [clsid.equ_exo] = true,
    [clsid.equ_military] = true,
    [clsid.equ_scientific] = true,
    [clsid.equ_stalker] = true,
    [clsid.equ_backpack] = true,
    [clsid.helmet] = true,
    [clsid.equ_helmet_s] = true,
    [clsid.equ_stalker_s] = true,
    -- Weapons
    [clsid.wpn_ammo_m209_s] = true,
    [clsid.wpn_ammo_og7b_s] = true,
    [clsid.wpn_ak74_s] = true,
    [clsid.wpn_auto_shotgun_s] = true,
    [clsid.wpn_binocular_s] = true,
    [clsid.wpn_bm16_s] = true,
    [clsid.wpn_grenade_launcher_s] = true,
    [clsid.wpn_groza_s] = true,
    [clsid.wpn_hpsa_s] = true,
    [clsid.wpn_knife_s] = true,
    [clsid.wpn_lr300_s] = true,
    [clsid.wpn_pm_s] = true,
    [clsid.wpn_rg6_s] = true,
    [clsid.wpn_rpg7_s] = true,
    [clsid.wpn_scope_s] = true,
    [clsid.wpn_shotgun_s] = true,
    [clsid.wpn_silencer_s] = true,
    [clsid.wpn_svd_s] = true,
    [clsid.wpn_svu_s] = true,
    [clsid.wpn_usp45_s] = true,
    [clsid.wpn_val_s] = true,
    [clsid.wpn_vintorez_s] = true,
    [clsid.wpn_walther_s] = true,
    [clsid.wpn_ak74] = true,
    [clsid.wpn_binocular] = true,
    [clsid.wpn_bm16] = true,
    [clsid.wpn_fn2000] = true,
    [clsid.wpn_fort] = true,
    [clsid.wpn_grenade_launcher] = true,
    [clsid.wpn_groza] = true,
    [clsid.wpn_hpsa] = true,
    [clsid.wpn_knife] = true,
    [clsid.wpn_lr300] = true,
    [clsid.wpn_pm] = true,
    [clsid.wpn_rg6] = true,
    [clsid.wpn_rpg7] = true,
    [clsid.wpn_scope] = true,
    [clsid.wpn_shotgun] = true,
    [clsid.wpn_silencer] = true,
    [clsid.wpn_stat_mgun] = true,
    [clsid.wpn_svd] = true,
    [clsid.wpn_svu] = true,
    [clsid.wpn_usp45] = true,
    [clsid.wpn_val] = true,
    [clsid.wpn_vintorez] = true,
    [clsid.wpn_walther] = true,
    [clsid.wpn_wmagaz] = true,
    [clsid.wpn_wmaggl] = true,
    [clsid.wpn_grenade_rgd5] = true,
    [clsid.wpn_grenade_rgd5_s] = true,
    [clsid.wpn_grenade_rpg7] = true,
    [clsid.wpn_grenade_f1] = true,
    [clsid.wpn_grenade_f1_s] = true,
    [clsid.wpn_grenade_fake] = true,
    [clsid.wpn_ammo_m209] = true,
    [clsid.wpn_ammo_og7b] = true,
    [clsid.wpn_ammo_vog25] = true,
    [clsid.wpn_ammo] = true,
    [clsid.wpn_ammo_s] = true,
  }

  function ui_enhanced_ground_items:__init() super()
    self.xml = CScriptXmlInit()
    self.xml:ParseFile("ui_enhanced_ground_items.xml")
    self.ratio = (1024/768)/(device().width/device().height)

    -- Tables for storing marker/UI data
    self.item_table = {}
    self.marker_table = {}
    self.ui_table = {}
    self.update_timer = 0
    self.update_delay = 100
  end

  function ui_enhanced_ground_items:__finalize()
    self:RemoveUIAndCleanUp()
  end

  function ui_enhanced_ground_items:RemoveUIAndCleanUp()
    -- Hide all UI elements (in case they were previously visible)
    for id,_ in pairs(self.ui_table) do
      self.ui_table[id]:Show(false) -- Hide all ui windows
    end
    self.ui_table = {} -- Clean up by clearing table

    for id,_ in pairs(self.marker_table) do
      self.marker_table[id]:Show(false) -- Hide all ui markers
    end
    self.marker_table = {} -- Clean up by clearing table

    self.item_table = {} -- Clean up by clearing table
  end

  function ui_enhanced_ground_items:Update()
    CUIScriptWnd.Update(self)

    if not isToggled or not enhanced_ground_items_mcm.EGI_ENABLED then
      self:RemoveUIAndCleanUp()
      return
    end

    -- Proceed with the update only if both conditions are true
    self:UpdateObject()
    self:UpdateUI()
  end

  function ui_enhanced_ground_items:UpdateObject()
    -- Only update on time delay
    if self.update_timer > time_global() then return end
    self.update_timer = time_global() + self.update_delay

    -- Check if mod is enabled
    self.show_item = enhanced_ground_items_mcm.EGI_ENABLED and main_hud_shown() or false
    if not self.show_item then return end

    local pos = db.actor:position()

    -- Optimize: Store items to remove to avoid modifying table during iteration
    local to_remove = {}

    -- Check each item in the table
    for id, _ in pairs(self.item_table) do
        local obj = object_by_id(id)
        if not self:ValidateItem(obj, pos) then
            table.insert(to_remove, id)
        end
    end

    -- Remove invalid items after iteration to avoid modifying the table during iteration
    for _, id in ipairs(to_remove) do
      self.item_table[id] = nil
      if self.marker_table[id] then
          self.marker_table[id]:Show(false)
          self.marker_table[id] = nil
      end
  end

    -- Process new objects more efficiently (only if not already in the table)
    for obj in game_objects_iter() do
        local obj_id = obj:id()
        if not self.item_table[obj_id] and self:ValidateItem(obj, pos) then
            self.item_table[obj_id] = true
        end
    end
  end

  function ui_enhanced_ground_items:UpdateUI()
    
    -- Ensure actor position is valid before proceeding
    local actor_pos = db.actor:position()
    if not actor_pos then return end

    -- Check each item in the table for updates
    for id, _ in pairs(self.item_table) do
      local obj = object_by_id(id)
      if not obj then goto continue end

      local obj_id = obj:id()
      local obj_pos = obj:position()
      if not obj_pos then goto continue end

      -- UI Window Handling (Only Show if Player is Looking at the Item)
      if enhanced_ground_items_mcm.EGI_WINDOWS_ENABLED then
        if not self.ui_table[obj_id] then
          local item_info = ui_enhanced_ground_items_info.UIItemInfo(self)
          item_info:Update(obj, obj:section())
          self:ApplyScreenRatio(item_info.dialog)
          self.ui_table[obj_id] = item_info.dialog
        end

        -- Check if the player is looking at the item (within distance)
        local targetObject = level.get_target_obj() or nil
        local looking_at_item = targetObject ~= nil and obj_id == targetObject:id() and 
                                targetObject:position():distance_to_sqr(actor_pos) < math.pow(2, 2)

        -- Show UI window if looking at item
        self.ui_table[obj_id]:Show(looking_at_item)

        -- Update UI Window Position based on world position
        if looking_at_item then
          local ui_pos = vector(20, 20) 

          -- Ensure ui_pos is valid
          if ui_pos and self:ScreenPosValid(ui_pos) then
            self.ui_table[obj_id]:SetWndPos(ui_pos)
          end
        end
      else -- Else remove all UI windows
        if self.ui_table ~= {} then
          for id,_ in pairs(self.ui_table) do
            self.ui_table[id]:Show(false) -- Hide all UI windows
          end
          self.ui_table = {} -- Clean up by clearing table
        end
      end

      -- Marker Handling (Only Show if Within Detection Distance)
      if enhanced_ground_items_mcm.EGI_MARKERS_ENABLED then
        -- Create marker if not already created
        if not self.marker_table[obj_id] then
            self.marker_table[obj_id] = self:GetUIItemName()
            self.marker_table[obj_id]:SetText(ui_item.get_obj_name(obj))
            self:ApplyScreenRatio(self.marker_table[obj_id])
        end

        -- Get the screen position for the marker
        local marker_pos = obj_pos and game.world2ui(obj_pos, false, false)

        -- Ensure marker position is valid and check if within detection distance
        if marker_pos and self:ScreenPosValid(marker_pos) then
            local distance = vector_distance(actor_pos, obj_pos)

            if distance then
                local visible = distance <= enhanced_ground_items_mcm.EGI_DETECTION_DISTANCE
                if visible then
                    self.marker_table[obj_id]:SetWndPos(marker_pos) -- Set position and show the marker if it's valid
                    self.marker_table[obj_id]:Show(true)
                else
                    self.marker_table[obj_id]:Show(false) -- Hide marker if out of detection range
                    self.marker_table[obj_id] = nil -- Remove from table when out of range
                end
            else
              if self.marker_table[obj_id] then
                self.marker_table[obj_id]:Show(false) -- Hide marker if no valid distance calculation
                self.marker_table[obj_id] = nil -- Remove marker when invalid
              end
            end
        else
            self.marker_table[obj_id]:Show(false) -- Hide marker if out of screen boundss
        end
      else -- Else remove all UI markers
        if self.marker_table ~= {} then
          for id,_ in pairs(self.marker_table) do
            self.marker_table[id]:Show(false) -- Hide all UI markers
          end
          self.marker_table = {} -- Clean up by clearing table
        end
      end

      ::continue::
    end
  end

  function ui_enhanced_ground_items:ValidateItem(obj, pos)
    -- Check if item is shown
    if not (self.show_item) then
      return false
    end
    -- Check if is valid item
    if not (self:IsItem(obj)) then
      return false
    end

    -- Check if item is in detection range
    if(obj:position():distance_to_sqr(pos) < math.pow(enhanced_ground_items_mcm.EGI_DETECTION_DISTANCE, 2)) then
      if(isToggled and enhanced_ground_items_mcm.EGI_ENABLED) then
        return true
      end
    end
    return false
  end 

  function ui_enhanced_ground_items:IsItem(obj)
    -- Removes items in hands and npc hands from being displayed wiht markers
    local se = alife_object(obj:id())
    if (se and (se.parent_id ~= 65535)) then
      return false
    end
    -- Add conditional logic for if item is held by actor or npc
    -- then item is not valid
    local cls = obj and obj:clsid()
    return item_classes[cls] or false
  end

  function ui_enhanced_ground_items:GetUIMark()
    -- Display item marker
    return self.xml:InitStatic("egi_item_spot", self)
  end

  function ui_enhanced_ground_items:GetUIItemName()
    -- Display item name
    return self.xml:InitTextWnd("egi_item_name", self)
  end

  function ui_enhanced_ground_items:ScreenPosValid(vec)
    return (vec.x ~= -9999) and (vec.y ~= 0) and (vec.x <= 1024) and (vec.y <= 768)
  end
  
  function ui_enhanced_ground_items:ApplyScreenRatio(ele)
    if (ele) then
      ele:SetWndSize(vector2():set(ele:GetWidth() * (self.ratio or 1), ele:GetHeight()))
    end
  end

-- Class end

-------------------------------------------------------------------------------------------------------
-- Callbacks/ Listeners
-------------------------------------------------------------------------------------------------------

function on_key_press(key)
  -- shift + f to toggle by default
  if(enhanced_ground_items_mcm.EGI_ENABLED) then -- Check if addon is Enabled/Disabled in MCM
    if(key == enhanced_ground_items_mcm.EGI_KEY) then  -- Using MCM Check for Single Tap or Double Tap

      -- No MCM case
      if(not enhanced_ground_items_mcm.MCM_KEYBINDS) then 
        toggle_show_items()
        return
      end
      -- MCM Simple Press
      if (enhanced_ground_items_mcm.EGI_MODE == 0) and ui_mcm.get_mod_key(enhanced_ground_items_mcm.EGI_MODIFIER) then
        ui_mcm.simple_press("porky_show_nearby_items", key, toggle_show_items())
      end
      -- MCM Double Tap
      if (enhanced_ground_items_mcm.EGI_MODE == 1) and ui_mcm.get_mod_key(enhanced_ground_items_mcm.EGI_MODIFIER) and ui_mcm.double_tap("porky_show_nearby_items", key) then
        toggle_show_items()
        return
      end

    end
  end
end

function on_show_hide()
	hud_update()
end

function actor_on_net_destroy()
	hud_remove()
end

function actor_on_first_update()
	hud_active()
end

-------------------------------------------------------------------------------------------------------
-- Register Callbacks
-------------------------------------------------------------------------------------------------------

-- Main game loop script to register callbacks
function on_game_start()
	RegisterScriptCallback("GUI_on_show",on_show_hide)
	RegisterScriptCallback("GUI_on_hide",on_show_hide)
	RegisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
  RegisterScriptCallback("on_key_press", on_key_press)

  log("[EGI - Enhanced Ground Items] - Addon enabled...")
end